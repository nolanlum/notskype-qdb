/**
 * notskype qdb
 * This is the notskype QDB server.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "/api/v1";

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface Body {
    "id"?: number;
    "body": string;
    "author"?: string;
    "addedAt"?: Date;
    "props"?: any;
}

export interface InlineResponse200 {
    "id"?: number;
    "body": string;
    "author"?: string;
    "addedAt"?: Date;
    "props"?: any;
}

export interface Quote {
    "id"?: number;
    "body": string;
    "author"?: string;
    "addedAt"?: Date;
    "props"?: any;
}



/**
 * QuoteApi - fetch parameter creator
 */
export const QuoteApiFetchParamCreator = {
    /**
     * Deletes a quote
     * @param quoteId ID of quote to delete
     */
    qdbQuoteDelete(params: {  "quoteId": number; }, options?: any): FetchArgs {
        // verify required parameter "quoteId" is set
        if (params["quoteId"] == null) {
            throw new Error("Missing required parameter quoteId when calling qdbQuoteDelete");
        }
        const baseUrl = `/quote/{quoteId}`
            .replace(`{${"quoteId"}}`, `${ params["quoteId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Searches for quotes
     * @param query Text to search for in the quote database
     */
    qdbQuoteFind(params: {  "query": string; }, options?: any): FetchArgs {
        // verify required parameter "query" is set
        if (params["query"] == null) {
            throw new Error("Missing required parameter query when calling qdbQuoteFind");
        }
        const baseUrl = `/quote/find`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "query": params["query"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get a list of quotes in reverse chronological order
     * @param count Number of quotes to fetch
     * @param offset Number of quotes to skip
     */
    qdbQuoteGet(params: {  "count"?: number; "offset"?: number; }, options?: any): FetchArgs {
        const baseUrl = `/quote`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "count": params["count"],
            "offset": params["offset"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Find quote by ID
     * Returns a single quote
     * @param quoteId ID of quote to return
     */
    qdbQuoteGetById(params: {  "quoteId": number; }, options?: any): FetchArgs {
        // verify required parameter "quoteId" is set
        if (params["quoteId"] == null) {
            throw new Error("Missing required parameter quoteId when calling qdbQuoteGetById");
        }
        const baseUrl = `/quote/{quoteId}`
            .replace(`{${"quoteId"}}`, `${ params["quoteId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Add a new quote to the database
     * @param body Quote body to be added to the database
     */
    qdbQuotePost(params: {  "body": Body; }, options?: any): FetchArgs {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling qdbQuotePost");
        }
        const baseUrl = `/quote`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get a random quote
     */
    qdbQuoteRand(options?: any): FetchArgs {
        const baseUrl = `/quote/rand`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * QuoteApi - functional programming interface
 */
export const QuoteApiFp = {
    /**
     * Deletes a quote
     * @param quoteId ID of quote to delete
     */
    qdbQuoteDelete(params: { "quoteId": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = QuoteApiFetchParamCreator.qdbQuoteDelete(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * Searches for quotes
     * @param query Text to search for in the quote database
     */
    qdbQuoteFind(params: { "query": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InlineResponse200>> {
        const fetchArgs = QuoteApiFetchParamCreator.qdbQuoteFind(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get a list of quotes in reverse chronological order
     * @param count Number of quotes to fetch
     * @param offset Number of quotes to skip
     */
    qdbQuoteGet(params: { "count"?: number; "offset"?: number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InlineResponse200>> {
        const fetchArgs = QuoteApiFetchParamCreator.qdbQuoteGet(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * Find quote by ID
     * Returns a single quote
     * @param quoteId ID of quote to return
     */
    qdbQuoteGetById(params: { "quoteId": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
        const fetchArgs = QuoteApiFetchParamCreator.qdbQuoteGetById(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * Add a new quote to the database
     * @param body Quote body to be added to the database
     */
    qdbQuotePost(params: { "body": Body;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InlineResponse200>> {
        const fetchArgs = QuoteApiFetchParamCreator.qdbQuotePost(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get a random quote
     */
    qdbQuoteRand(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InlineResponse200>> {
        const fetchArgs = QuoteApiFetchParamCreator.qdbQuoteRand(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * QuoteApi - object-oriented interface
 */
export class QuoteApi extends BaseAPI {
    /**
     * Deletes a quote
     * @param quoteId ID of quote to delete
     */
    qdbQuoteDelete(params: {  "quoteId": number; }, options?: any) {
        return QuoteApiFp.qdbQuoteDelete(params, options)(this.fetch, this.basePath);
    }
    /**
     * Searches for quotes
     * @param query Text to search for in the quote database
     */
    qdbQuoteFind(params: {  "query": string; }, options?: any) {
        return QuoteApiFp.qdbQuoteFind(params, options)(this.fetch, this.basePath);
    }
    /**
     * Get a list of quotes in reverse chronological order
     * @param count Number of quotes to fetch
     * @param offset Number of quotes to skip
     */
    qdbQuoteGet(params: {  "count"?: number; "offset"?: number; }, options?: any) {
        return QuoteApiFp.qdbQuoteGet(params, options)(this.fetch, this.basePath);
    }
    /**
     * Find quote by ID
     * Returns a single quote
     * @param quoteId ID of quote to return
     */
    qdbQuoteGetById(params: {  "quoteId": number; }, options?: any) {
        return QuoteApiFp.qdbQuoteGetById(params, options)(this.fetch, this.basePath);
    }
    /**
     * Add a new quote to the database
     * @param body Quote body to be added to the database
     */
    qdbQuotePost(params: {  "body": Body; }, options?: any) {
        return QuoteApiFp.qdbQuotePost(params, options)(this.fetch, this.basePath);
    }
    /**
     * Get a random quote
     */
    qdbQuoteRand(options?: any) {
        return QuoteApiFp.qdbQuoteRand(options)(this.fetch, this.basePath);
    }
};

/**
 * QuoteApi - factory interface
 */
export const QuoteApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Deletes a quote
         * @param quoteId ID of quote to delete
         */
        qdbQuoteDelete(params: {  "quoteId": number; }, options?: any) {
            return QuoteApiFp.qdbQuoteDelete(params, options)(fetch, basePath);
        },
        /**
         * Searches for quotes
         * @param query Text to search for in the quote database
         */
        qdbQuoteFind(params: {  "query": string; }, options?: any) {
            return QuoteApiFp.qdbQuoteFind(params, options)(fetch, basePath);
        },
        /**
         * Get a list of quotes in reverse chronological order
         * @param count Number of quotes to fetch
         * @param offset Number of quotes to skip
         */
        qdbQuoteGet(params: {  "count"?: number; "offset"?: number; }, options?: any) {
            return QuoteApiFp.qdbQuoteGet(params, options)(fetch, basePath);
        },
        /**
         * Find quote by ID
         * Returns a single quote
         * @param quoteId ID of quote to return
         */
        qdbQuoteGetById(params: {  "quoteId": number; }, options?: any) {
            return QuoteApiFp.qdbQuoteGetById(params, options)(fetch, basePath);
        },
        /**
         * Add a new quote to the database
         * @param body Quote body to be added to the database
         */
        qdbQuotePost(params: {  "body": Body; }, options?: any) {
            return QuoteApiFp.qdbQuotePost(params, options)(fetch, basePath);
        },
        /**
         * Get a random quote
         */
        qdbQuoteRand(options?: any) {
            return QuoteApiFp.qdbQuoteRand(options)(fetch, basePath);
        },
    };
};
