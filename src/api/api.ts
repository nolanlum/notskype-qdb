// tslint:disable
/**
 * notskype qdb
 * This is the notskype QDB server.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/api/v1";

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * 
     * @type {Date}
     * @memberof Quote
     */
    addedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    body: string;
    /**
     * 
     * @type {number}
     * @memberof Quote
     */
    id?: number;
    /**
     * 
     * @type {any}
     * @memberof Quote
     */
    props?: any;
}


/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Request a QDB authentication token from a Slack authorization code
         * @summary Issue a QDB authentication token
         * @param {string} slackCode Authorization code from Slack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbAuthPost(slackCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'slackCode' is not null or undefined
            if (slackCode === null || slackCode === undefined) {
                throw new RequiredError('slackCode','Required parameter slackCode was null or undefined when calling qdbAuthPost.');
            }
            const localVarPath = `/auth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (slackCode !== undefined) {
                localVarQueryParameter['slack_code'] = slackCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Request a QDB authentication token from a Slack authorization code
         * @summary Issue a QDB authentication token
         * @param {string} slackCode Authorization code from Slack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbAuthPost(slackCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).qdbAuthPost(slackCode, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Request a QDB authentication token from a Slack authorization code
         * @summary Issue a QDB authentication token
         * @param {string} slackCode Authorization code from Slack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbAuthPost(slackCode: string, options?: any) {
            return AuthApiFp(configuration).qdbAuthPost(slackCode, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Request a QDB authentication token from a Slack authorization code
     * @summary Issue a QDB authentication token
     * @param {} slackCode Authorization code from Slack
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public qdbAuthPost(slackCode: string, options?: any) {
        return AuthApiFp(this.configuration).qdbAuthPost(slackCode, options)(this.fetch, this.basePath);
    }

}

/**
 * QuoteApi - fetch parameter creator
 * @export
 */
export const QuoteApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a quote
         * @param {number} quoteId ID of quote to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteDelete(quoteId: number, options: any = {}): FetchArgs {
            // verify required parameter 'quoteId' is not null or undefined
            if (quoteId === null || quoteId === undefined) {
                throw new RequiredError('quoteId','Required parameter quoteId was null or undefined when calling qdbQuoteDelete.');
            }
            const localVarPath = `/quote/{quoteId}`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication QdbToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Qdb-Token")
					: configuration.apiKey;
                localVarHeaderParameter["X-Qdb-Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for quotes
         * @param {string} query Text to search for in the quote database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteFind(query: string, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling qdbQuoteFind.');
            }
            const localVarPath = `/quote/find`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication QdbToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Qdb-Token")
					: configuration.apiKey;
                localVarHeaderParameter["X-Qdb-Token"] = localVarApiKeyValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of quotes in reverse chronological order
         * @param {number} [count] Number of quotes to fetch
         * @param {number} [offset] Number of quotes to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteGet(count?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/quote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication QdbToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Qdb-Token")
					: configuration.apiKey;
                localVarHeaderParameter["X-Qdb-Token"] = localVarApiKeyValue;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single quote
         * @summary Find quote by ID
         * @param {number} quoteId ID of quote to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteGetById(quoteId: number, options: any = {}): FetchArgs {
            // verify required parameter 'quoteId' is not null or undefined
            if (quoteId === null || quoteId === undefined) {
                throw new RequiredError('quoteId','Required parameter quoteId was null or undefined when calling qdbQuoteGetById.');
            }
            const localVarPath = `/quote/{quoteId}`
                .replace(`{${"quoteId"}}`, encodeURIComponent(String(quoteId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication QdbToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Qdb-Token")
					: configuration.apiKey;
                localVarHeaderParameter["X-Qdb-Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new quote to the database
         * @param {Quote} body Quote body to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuotePost(body: Quote, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling qdbQuotePost.');
            }
            const localVarPath = `/quote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication QdbToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Qdb-Token")
					: configuration.apiKey;
                localVarHeaderParameter["X-Qdb-Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Quote" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a random quote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteRand(options: any = {}): FetchArgs {
            const localVarPath = `/quote/rand`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication QdbToken required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Qdb-Token")
					: configuration.apiKey;
                localVarHeaderParameter["X-Qdb-Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoteApi - functional programming interface
 * @export
 */
export const QuoteApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a quote
         * @param {number} quoteId ID of quote to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteDelete(quoteId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = QuoteApiFetchParamCreator(configuration).qdbQuoteDelete(quoteId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Searches for quotes
         * @param {string} query Text to search for in the quote database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteFind(query: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
            const localVarFetchArgs = QuoteApiFetchParamCreator(configuration).qdbQuoteFind(query, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a list of quotes in reverse chronological order
         * @param {number} [count] Number of quotes to fetch
         * @param {number} [offset] Number of quotes to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteGet(count?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
            const localVarFetchArgs = QuoteApiFetchParamCreator(configuration).qdbQuoteGet(count, offset, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single quote
         * @summary Find quote by ID
         * @param {number} quoteId ID of quote to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteGetById(quoteId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Quote> {
            const localVarFetchArgs = QuoteApiFetchParamCreator(configuration).qdbQuoteGetById(quoteId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add a new quote to the database
         * @param {Quote} body Quote body to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuotePost(body: Quote, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
            const localVarFetchArgs = QuoteApiFetchParamCreator(configuration).qdbQuotePost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a random quote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteRand(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Quote> {
            const localVarFetchArgs = QuoteApiFetchParamCreator(configuration).qdbQuoteRand(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * QuoteApi - factory interface
 * @export
 */
export const QuoteApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Deletes a quote
         * @param {number} quoteId ID of quote to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteDelete(quoteId: number, options?: any) {
            return QuoteApiFp(configuration).qdbQuoteDelete(quoteId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Searches for quotes
         * @param {string} query Text to search for in the quote database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteFind(query: string, options?: any) {
            return QuoteApiFp(configuration).qdbQuoteFind(query, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a list of quotes in reverse chronological order
         * @param {number} [count] Number of quotes to fetch
         * @param {number} [offset] Number of quotes to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteGet(count?: number, offset?: number, options?: any) {
            return QuoteApiFp(configuration).qdbQuoteGet(count, offset, options)(fetch, basePath);
        },
        /**
         * Returns a single quote
         * @summary Find quote by ID
         * @param {number} quoteId ID of quote to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteGetById(quoteId: number, options?: any) {
            return QuoteApiFp(configuration).qdbQuoteGetById(quoteId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add a new quote to the database
         * @param {Quote} body Quote body to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuotePost(body: Quote, options?: any) {
            return QuoteApiFp(configuration).qdbQuotePost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a random quote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qdbQuoteRand(options?: any) {
            return QuoteApiFp(configuration).qdbQuoteRand(options)(fetch, basePath);
        },
    };
};

/**
 * QuoteApi - object-oriented interface
 * @export
 * @class QuoteApi
 * @extends {BaseAPI}
 */
export class QuoteApi extends BaseAPI {
    /**
     * 
     * @summary Deletes a quote
     * @param {} quoteId ID of quote to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public qdbQuoteDelete(quoteId: number, options?: any) {
        return QuoteApiFp(this.configuration).qdbQuoteDelete(quoteId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Searches for quotes
     * @param {} query Text to search for in the quote database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public qdbQuoteFind(query: string, options?: any) {
        return QuoteApiFp(this.configuration).qdbQuoteFind(query, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a list of quotes in reverse chronological order
     * @param {} [count] Number of quotes to fetch
     * @param {} [offset] Number of quotes to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public qdbQuoteGet(count?: number, offset?: number, options?: any) {
        return QuoteApiFp(this.configuration).qdbQuoteGet(count, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single quote
     * @summary Find quote by ID
     * @param {} quoteId ID of quote to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public qdbQuoteGetById(quoteId: number, options?: any) {
        return QuoteApiFp(this.configuration).qdbQuoteGetById(quoteId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add a new quote to the database
     * @param {} body Quote body to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public qdbQuotePost(body: Quote, options?: any) {
        return QuoteApiFp(this.configuration).qdbQuotePost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a random quote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public qdbQuoteRand(options?: any) {
        return QuoteApiFp(this.configuration).qdbQuoteRand(options)(this.fetch, this.basePath);
    }

}

