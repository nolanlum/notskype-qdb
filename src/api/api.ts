// Manually modified due to github.com/swagger-api/swagger-codegen/issues/4657
// Will re-generate when swagger codegen 2.2.3 releases

/**
 * notskype qdb
 * This is the notskype QDB server.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "/api/v1";

export interface FetchArgs {
    url: string;
    options: any; 
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

export interface Quote {
    "id"?: number;
    "body": string;
    "author"?: string;
    "addedAt"?: Date;
}



/**
 * QuoteApi - fetch parameter creator
 */
export const QuoteApiFetchParamCreactor = {
    /** 
     * Deletes a quote
     * @param quoteId ID of quote to delete
     */
    qdbQuoteDelete(params: {  quoteId: number; }): FetchArgs {
        // verify required parameter "quoteId" is set
        if (params["quoteId"] == null) {
            throw new Error("Missing required parameter quoteId when calling qdbQuoteDelete");
        }
        const baseUrl = `/quote/{quoteId}`
            .replace(`{${"quoteId"}}`, `${ params.quoteId }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "DELETE" };

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Searches for quotes
     * @param query Text to search for in the quote database
     */
    qdbQuoteFind(params: {  query: string; }): FetchArgs {
        // verify required parameter "query" is set
        if (params["query"] == null) {
            throw new Error("Missing required parameter query when calling qdbQuoteFind");
        }
        const baseUrl = `/quote/find`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "query": params.query,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a list of quotes in reverse chronological order
     * @param count Number of quotes to fetch
     * @param offset Number of quotes to skip
     */
    qdbQuoteGet(params: {  count?: number; offset?: number; }): FetchArgs {
        const baseUrl = `/quote`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "count": params.count,
            "offset": params.offset,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Find quote by ID
     * Returns a single quote
     * @param quoteId ID of quote to return
     */
    qdbQuoteGetById(params: {  quoteId: number; }): FetchArgs {
        // verify required parameter "quoteId" is set
        if (params["quoteId"] == null) {
            throw new Error("Missing required parameter quoteId when calling qdbQuoteGetById");
        }
        const baseUrl = `/quote/{quoteId}`
            .replace(`{${"quoteId"}}`, `${ params.quoteId }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Add a new quote to the database
     * @param body Quote body to be added to the database
     */
    qdbQuotePost(params: {  body: Quote; }): FetchArgs {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling qdbQuotePost");
        }
        const baseUrl = `/quote`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * QuoteApi - functional programming interface
 */
export const QuoteApiFp = {
    /** 
     * Deletes a quote
     * @param quoteId ID of quote to delete
     */
    qdbQuoteDelete(params: { quoteId: number;  }): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = QuoteApiFetchParamCreactor.qdbQuoteDelete(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Searches for quotes
     * @param query Text to search for in the quote database
     */
    qdbQuoteFind(params: { query: string;  }): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
        const fetchArgs = QuoteApiFetchParamCreactor.qdbQuoteFind(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a list of quotes in reverse chronological order
     * @param count Number of quotes to fetch
     * @param offset Number of quotes to skip
     */
    qdbQuoteGet(params: { count?: number; offset?: number;  }): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
        const fetchArgs = QuoteApiFetchParamCreactor.qdbQuoteGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Find quote by ID
     * Returns a single quote
     * @param quoteId ID of quote to return
     */
    qdbQuoteGetById(params: { quoteId: number;  }): (fetch?: FetchAPI, basePath?: string) => Promise<Quote> {
        const fetchArgs = QuoteApiFetchParamCreactor.qdbQuoteGetById(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Add a new quote to the database
     * @param body Quote body to be added to the database
     */
    qdbQuotePost(params: { body: Quote;  }): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = QuoteApiFetchParamCreactor.qdbQuotePost(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * QuoteApi - object-oriented interface
 */
export class QuoteApi extends BaseAPI {
    /** 
     * Deletes a quote
     * @param quoteId ID of quote to delete
     */
    qdbQuoteDelete(params: {  quoteId: number; }) {
        return QuoteApiFp.qdbQuoteDelete(params)(this.fetch, this.basePath);
    }
    /** 
     * Searches for quotes
     * @param query Text to search for in the quote database
     */
    qdbQuoteFind(params: {  query: string; }) {
        return QuoteApiFp.qdbQuoteFind(params)(this.fetch, this.basePath);
    }
    /** 
     * Get a list of quotes in reverse chronological order
     * @param count Number of quotes to fetch
     * @param offset Number of quotes to skip
     */
    qdbQuoteGet(params: {  count?: number; offset?: number; }) {
        return QuoteApiFp.qdbQuoteGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Find quote by ID
     * Returns a single quote
     * @param quoteId ID of quote to return
     */
    qdbQuoteGetById(params: {  quoteId: number; }) {
        return QuoteApiFp.qdbQuoteGetById(params)(this.fetch, this.basePath);
    }
    /** 
     * Add a new quote to the database
     * @param body Quote body to be added to the database
     */
    qdbQuotePost(params: {  body: Quote; }) {
        return QuoteApiFp.qdbQuotePost(params)(this.fetch, this.basePath);
    }
};

/**
 * QuoteApi - factory interface
 */
export const QuoteApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Deletes a quote
         * @param quoteId ID of quote to delete
         */
        qdbQuoteDelete(params: {  quoteId: number; }) {
            return QuoteApiFp.qdbQuoteDelete(params)(fetch, basePath);
        },
        /** 
         * Searches for quotes
         * @param query Text to search for in the quote database
         */
        qdbQuoteFind(params: {  query: string; }) {
            return QuoteApiFp.qdbQuoteFind(params)(fetch, basePath);
        },
        /** 
         * Get a list of quotes in reverse chronological order
         * @param count Number of quotes to fetch
         * @param offset Number of quotes to skip
         */
        qdbQuoteGet(params: {  count?: number; offset?: number; }) {
            return QuoteApiFp.qdbQuoteGet(params)(fetch, basePath);
        },
        /** 
         * Find quote by ID
         * Returns a single quote
         * @param quoteId ID of quote to return
         */
        qdbQuoteGetById(params: {  quoteId: number; }) {
            return QuoteApiFp.qdbQuoteGetById(params)(fetch, basePath);
        },
        /** 
         * Add a new quote to the database
         * @param body Quote body to be added to the database
         */
        qdbQuotePost(params: {  body: Quote; }) {
            return QuoteApiFp.qdbQuotePost(params)(fetch, basePath);
        },
    }
};

